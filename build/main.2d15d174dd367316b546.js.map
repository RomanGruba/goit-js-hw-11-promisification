{"version":3,"sources":["webpack:///./js/task-3.js"],"names":["makeTransaction","transaction","min","max","delay","Math","floor","random","Promise","resolve","reject","setTimeout","id","time","logSuccess","_ref","console","log","logError","warn","amount","then","catch"],"mappings":"qKA8DMA,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCC,GAL2BF,EAKO,IALFC,EAKO,IAJtCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAgBpD,OAVgB,IAAIM,QAAQ,SAACC,EAASC,GACpCC,WAAW,WACUN,KAAKE,SAAW,GAEjCE,EAAQ,CAAEG,GAAIX,EAAYW,GAAIC,KAAMT,IAEpCM,EAAOT,EAAYW,OAGtBR,IAICU,EAAa,SAAAC,GAAkB,IAAfH,EAAeG,EAAfH,GAAIC,EAAWE,EAAXF,KACxBG,QAAQC,IAAR,eAA2BL,EAA3B,iBAA8CC,EAA9C,OAGIK,EAAW,SAAAN,GACfI,QAAQG,KAAR,gCAA6CP,EAA7C,8BAGFZ,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETlB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETlB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETlB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"main.2d15d174dd367316b546.js","sourcesContent":["import { reject } from 'q';\r\n\r\n// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n// ===============================================================================================================================================\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    });\r\n  }, delay);\r\n  return promise;\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"],"sourceRoot":""}