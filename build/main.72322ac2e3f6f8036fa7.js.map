{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","Object","assign","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","_ref","logError","warn","amount","catch"],"mappings":"2JAeMA,EAAQ,SAAAC,GAIZ,OAHgB,IAAIC,QAAQ,SAACC,EAASC,GACpCC,WAAW,kBAAMF,EAAO,GAAIF,IAAOA,MAKjCK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,yDCSXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAOjC,OANgB,IAAId,QAAQ,SAACC,EAASC,GAIpCD,EAHqBY,EAASE,IAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAdG,OAAAC,OAAA,GAA8BF,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,QAO7DZ,EAAS,SAAAe,GAAY,OAAIb,QAAQc,MAAMD,IAE7CP,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCEnC,IAIMiB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhC1B,GAL2ByB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAgBpD,OAVgB,IAAIvB,QAAQ,SAACC,EAASC,GACpCC,WAAW,WACUsB,KAAKE,SAAW,GAEjC1B,EAAQ,CAAE2B,GAAIN,EAAYM,GAAIvB,KAAMP,IAEpCI,EAAOoB,EAAYM,OAGtB9B,IAIC+B,EAAa,SAAAC,GAAkB,IAAfF,EAAeE,EAAfF,GAAIvB,EAAWyB,EAAXzB,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGI0B,EAAW,SAAAH,GACftB,QAAQ0B,KAAR,gCAA6CJ,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,KAC/BzB,KAAKqB,GACLK,MAAMH,GAETV,EAAgB,CAAEO,GAAI,GAAIK,OAAQ,MAC/BzB,KAAKqB,GACLK,MAAMH","file":"main.72322ac2e3f6f8036fa7.js","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\n// const delay = ms => {\r\n//   // Твой код\r\n// };\r\n\r\n// const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// // Вызовы функции для проверки\r\n// delay(2000).then(logger); // Resolved after 2000ms\r\n// delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms\r\n// ===============================================================================================================================================\r\n\r\nconst delay = ms => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => resolve(`${ms}`), ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","import { resolve } from 'path';\r\nimport { reject } from 'q';\r\n\r\n// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n//  * Сейчас работает так\r\n//  */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);\r\n// ===============================================================================================================================================\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n","import { reject } from 'q';\r\n\r\n// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n// ===============================================================================================================================================\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    });\r\n  }, delay);\r\n  return promise;\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"],"sourceRoot":""}